<head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible">
</head>
<body>
    <ul class="pager">
        <li class="next"><a href="/Home/Stations">Вперед &rarr;</a></li>
    </ul>
    <div class="row" style="margin: 50px 0">
        <div class="progress">
            <div class="progress-bar" role="progressbar" aria-valuenow="0" aria-valuemin="0" aria-valuemax="100" style="width:0%">
                <span class="sr-only">70% Complete</span>
            </div>
        </div>
        <div class="col-md-8" id="map"></div>
        <div class="col-md-4">
            <div class="row">
                <button class="btn-primary btn recognise">Распознать</button>
                <button class="btn-success btn save">Сохранить</button>
            </div>

            <div class="row values well">
                @foreach (var item in ViewBag.Addresses)
                {
                    <p class="address-@item.id">@item.address</p>
                }
            </div>
        </div>
    </div>
</body>      

<script type="text/javascript">
    //<![CDATA[

    document.getElementsByClassName('recognise')[0].addEventListener('click', theNext);
    let data = @Json.Serialize(ViewBag.Addresses);

    // delay between geocode requests - at the time of writing, 100 miliseconds seems to work well
    var delay = 100;
    let map;
    let geo;
    let bounds;
    // ====== Create map objects ======
    function initMap() {
        var infowindow = new google.maps.InfoWindow();
        var latlng = new google.maps.LatLng(-34.397, 150.644);
        var mapOptions = {
            zoom: 8,
            center: latlng,
            mapTypeId: google.maps.MapTypeId.ROADMAP
        }
        geo = new google.maps.Geocoder();
        map = new google.maps.Map(document.getElementById("map"), mapOptions);
        bounds = new google.maps.LatLngBounds();
    }
      // ====== Geocoding ======
    function getAddress(adr, next) {
        let search = data[adr];
        geo.geocode({address:search.address}, function (results,status)
          {
            // If that was successful
            if (status == google.maps.GeocoderStatus.OK) {
              // Lets assume that the first marker is the one we want
              var p = results[0].geometry.location;
              var lat=p.lat();
              var lng=p.lng();
              search.coordinates = [results[0].geometry.location.lat(), results[0].geometry.location.lng()];
              let it = document.getElementsByClassName('address-' + search.id);
              it[0].style.color = "green";
              // Output the data
              var msg = 'address="' + search + '" lat=' +lat+ ' lng=' +lng+ '(delay='+delay+'ms)<br>';
              
                //document.getElementById("messages").innerHTML += msg;
                //alert(msg);
              // Create a marker
              createMarker(search,lat,lng);
            }
            // ====== Decode the error status ======
            else {
              // === if we were sending the requests to fast, try this one again and increase the delay
              if (status == google.maps.GeocoderStatus.OVER_QUERY_LIMIT) {
                nextAddress--;
                delay++;
              } else {
                let it = document.getElementsByClassName('address-' + search.id);
                it[0].style.color = "red";
                var reason="Code "+status;
                var msg = 'address="' + search + '" error=' +reason+ '(delay='+delay+'ms)<br>';
                  //document.getElementById("messages").innerHTML += msg;
                //alert(msg);
              }
            }
            next();
          }
        );
      }

     // ======= Function to create a marker
     function createMarker(add,lat,lng) {
       var contentString = add;
       var marker = new google.maps.Marker({
         position: new google.maps.LatLng(lat,lng),
         map: map,
       });

      google.maps.event.addListener(marker, 'click', function() {
         infowindow.setContent(contentString);
         infowindow.open(map,marker);
       });

       bounds.extend(marker.position);

     }


      // ======= Global variable to remind us what to do next
      var nextAddress = 0;

      // ======= Function to call the next Geocode operation when the reply comes back

      function theNext() {
        if (nextAddress < data.length) {
            setTimeout("getAddress('"+ nextAddress+"',theNext)", delay);
            var progress = $('.progress-bar');
            var curProgress = (nextAddress/data.length) * 100
            progress.attr('aria-valuenow', curProgress);
            progress.css('width', curProgress + '%');
          nextAddress++;
        } else {
          // We're done. Show map bounds
          map.fitBounds(bounds);
        }
      }

        document.getElementsByClassName('save')[0].addEventListener('click',  function () {
            let t = JSON.stringify(data);

            $.ajax({
                type: "POST",
                url: "/Home/Save?type=G",
                data: t,
                contentType: "application/json;charset=utf-8",
                success: function(msg){
                    alert( "Data Saved: " + msg );
                }
            });
        });

      // ======= Call that function for the first time =======
      //theNext();

    // This Javascript is based on code provided by the
    // Community Church Javascript Team
    // http://www.bisphamchurch.org.uk/
    // http://econym.org.uk/gmap/

    //]]>
</script>

<script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyDVvbMYmnMK_P1YCbLiIXbqIQQyF03atD8&callback=initMap" async defer></script> 

<style>
    #map {
        height: 500px;
        margin: 0 0 10% 0;
    }

    .values {
        max-height: 450px;
        overflow: scroll;
    }

    .row {
        margin: 0 0 20px 0;
    }
</style>